//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""8a430202-18af-44f8-a351-d067eb2a629c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7f198511-cad9-420c-9276-78635784d58e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e139b82f-c5de-4af3-8ea3-bd1c4bce77d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""12ff638c-9ea6-4dcc-a153-91ea8f9c4125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunPressed"",
                    ""type"": ""Button"",
                    ""id"": ""8651c670-d437-4510-a652-50b4d867833b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DashPressed"",
                    ""type"": ""Button"",
                    ""id"": ""4ca03ae0-4c65-436f-a408-141934fb64ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirePressed"",
                    ""type"": ""Button"",
                    ""id"": ""86252a4f-acc0-4dff-941a-c4c43e75fb77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07fb408c-67d1-453d-b76e-26428ca755a0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cca54d83-4e44-4b58-8c00-fcdf303818fa"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b55d55ee-a9ca-468c-9137-50feaed9cda2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfe3cc44-94c4-4f96-8641-86e3d3d5566f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d293e627-7b0d-41e0-9382-7d510bd08158"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43dc4122-42d6-4488-9f4f-4a664154a480"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SecondPlayer"",
            ""id"": ""58061a92-4726-4fdb-8612-5924887d3e2c"",
            ""actions"": [
                {
                    ""name"": ""SMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a8e0dab0-6bcf-4373-af1f-8b448c82b7a4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SCursor"",
                    ""type"": ""PassThrough"",
                    ""id"": ""612f250f-13f6-42d3-b0a3-37cee5e3653d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""9e6ef431-32f1-46af-9c43-bac9e3c182c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25ed17aa-35ef-481a-b861-378c9b18da09"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""SMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab37a6ef-ce71-4536-a477-3290d4319c3b"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b752e89b-6368-42bb-8ce1-eb0c7fe8d6b8"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button7"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Move = m_GamePlay.FindAction("Move", throwIfNotFound: true);
        m_GamePlay_Cursor = m_GamePlay.FindAction("Cursor", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_RunPressed = m_GamePlay.FindAction("RunPressed", throwIfNotFound: true);
        m_GamePlay_DashPressed = m_GamePlay.FindAction("DashPressed", throwIfNotFound: true);
        m_GamePlay_FirePressed = m_GamePlay.FindAction("FirePressed", throwIfNotFound: true);
        // SecondPlayer
        m_SecondPlayer = asset.FindActionMap("SecondPlayer", throwIfNotFound: true);
        m_SecondPlayer_SMove = m_SecondPlayer.FindAction("SMove", throwIfNotFound: true);
        m_SecondPlayer_SCursor = m_SecondPlayer.FindAction("SCursor", throwIfNotFound: true);
        m_SecondPlayer_jump = m_SecondPlayer.FindAction("jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Move;
    private readonly InputAction m_GamePlay_Cursor;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_RunPressed;
    private readonly InputAction m_GamePlay_DashPressed;
    private readonly InputAction m_GamePlay_FirePressed;
    public struct GamePlayActions
    {
        private @PlayerController m_Wrapper;
        public GamePlayActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePlay_Move;
        public InputAction @Cursor => m_Wrapper.m_GamePlay_Cursor;
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        public InputAction @RunPressed => m_Wrapper.m_GamePlay_RunPressed;
        public InputAction @DashPressed => m_Wrapper.m_GamePlay_DashPressed;
        public InputAction @FirePressed => m_Wrapper.m_GamePlay_FirePressed;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMove;
                @Cursor.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCursor;
                @Cursor.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCursor;
                @Cursor.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCursor;
                @Jump.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @RunPressed.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunPressed;
                @RunPressed.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunPressed;
                @RunPressed.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunPressed;
                @DashPressed.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnDashPressed;
                @DashPressed.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnDashPressed;
                @DashPressed.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnDashPressed;
                @FirePressed.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnFirePressed;
                @FirePressed.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnFirePressed;
                @FirePressed.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnFirePressed;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Cursor.started += instance.OnCursor;
                @Cursor.performed += instance.OnCursor;
                @Cursor.canceled += instance.OnCursor;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @RunPressed.started += instance.OnRunPressed;
                @RunPressed.performed += instance.OnRunPressed;
                @RunPressed.canceled += instance.OnRunPressed;
                @DashPressed.started += instance.OnDashPressed;
                @DashPressed.performed += instance.OnDashPressed;
                @DashPressed.canceled += instance.OnDashPressed;
                @FirePressed.started += instance.OnFirePressed;
                @FirePressed.performed += instance.OnFirePressed;
                @FirePressed.canceled += instance.OnFirePressed;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // SecondPlayer
    private readonly InputActionMap m_SecondPlayer;
    private ISecondPlayerActions m_SecondPlayerActionsCallbackInterface;
    private readonly InputAction m_SecondPlayer_SMove;
    private readonly InputAction m_SecondPlayer_SCursor;
    private readonly InputAction m_SecondPlayer_jump;
    public struct SecondPlayerActions
    {
        private @PlayerController m_Wrapper;
        public SecondPlayerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @SMove => m_Wrapper.m_SecondPlayer_SMove;
        public InputAction @SCursor => m_Wrapper.m_SecondPlayer_SCursor;
        public InputAction @jump => m_Wrapper.m_SecondPlayer_jump;
        public InputActionMap Get() { return m_Wrapper.m_SecondPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SecondPlayerActions set) { return set.Get(); }
        public void SetCallbacks(ISecondPlayerActions instance)
        {
            if (m_Wrapper.m_SecondPlayerActionsCallbackInterface != null)
            {
                @SMove.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSMove;
                @SMove.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSMove;
                @SMove.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSMove;
                @SCursor.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSCursor;
                @SCursor.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSCursor;
                @SCursor.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSCursor;
                @jump.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_SecondPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SMove.started += instance.OnSMove;
                @SMove.performed += instance.OnSMove;
                @SMove.canceled += instance.OnSMove;
                @SCursor.started += instance.OnSCursor;
                @SCursor.performed += instance.OnSCursor;
                @SCursor.canceled += instance.OnSCursor;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
            }
        }
    }
    public SecondPlayerActions @SecondPlayer => new SecondPlayerActions(this);
    public interface IGamePlayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRunPressed(InputAction.CallbackContext context);
        void OnDashPressed(InputAction.CallbackContext context);
        void OnFirePressed(InputAction.CallbackContext context);
    }
    public interface ISecondPlayerActions
    {
        void OnSMove(InputAction.CallbackContext context);
        void OnSCursor(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
